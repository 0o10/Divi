digraph "createmasternodekey"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="createmasternodekey",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node0 -> Node1 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="HelpExampleCli",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$rpcserver_8cpp.html#ac01ac6eab5467567ed0da106814e04ec"];
  Node0 -> Node2 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="HelpExampleRpc",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$rpcserver_8cpp.html#a06ea60e24e5a1053a14a11b1009bf9ef"];
  Node0 -> Node3 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="CKey::MakeNewKey",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_key.html#a9d12ed9d297e4286250fd7ea6b59e1a5",tooltip="Generate a new private key using a cryptographic PRNG. "];
  Node3 -> Node4 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="GetRandBytes",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$random_8cpp.html#ada0c29949c4d1ac0cc027d93c4771423",tooltip="Functions to gather random data via the OpenSSL PRNG. "];
  Node3 -> Node5 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="CKey::Check",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_key.html#acec869bc75fa8f4d619ab025d367a97c",tooltip="Check whether the 32-byte array pointed to be vch is valid keydata. "];
  Node5 -> Node6 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="eccrypto::Check",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$namespaceeccrypto.html#a231bdcb32521375b68fbdaf0d952cfd0"];
  Node0 -> Node7 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="CBase58Data::ToString",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_base58_data.html#a7dc91af403ca02694b3247b15604e220"];
  Node7 -> Node8 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="EncodeBase58Check",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$base58_8cpp.html#ace9a5807ee51604f33044339f073ec76",tooltip="Encode a byte vector into a base58-encoded string, including checksum. "];
  Node8 -> Node9 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="Hash",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$hash_8h.html#a12c5e981d7f5f2850027fd5e932eff61",tooltip="Compute the 256-bit hash of a std::string. "];
  Node8 -> Node10 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="EncodeBase58",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$base58_8cpp.html#a8d6f0e9d5df175b4966dcede31dc90ad",tooltip="Why base-58 instead of standard base-64 encoding? "];
}
